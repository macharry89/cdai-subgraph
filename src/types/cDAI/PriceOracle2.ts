// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class PriceOracle2 extends SmartContract {
  static bind(address: Address): PriceOracle2 {
    return new PriceOracle2("PriceOracle2", address);
  }

  cEthAddress(): Address {
    let result = super.call("cEthAddress", []);

    return result[0].toAddress();
  }

  try_cEthAddress(): CallResult<Address> {
    let result = super.tryCall("cEthAddress", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  comptroller(): Address {
    let result = super.call("comptroller", []);

    return result[0].toAddress();
  }

  try_comptroller(): CallResult<Address> {
    let result = super.tryCall("comptroller", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  isPriceOracle(): boolean {
    let result = super.call("isPriceOracle", []);

    return result[0].toBoolean();
  }

  try_isPriceOracle(): CallResult<boolean> {
    let result = super.tryCall("isPriceOracle", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  makerUsdOracleKey(): Address {
    let result = super.call("makerUsdOracleKey", []);

    return result[0].toAddress();
  }

  try_makerUsdOracleKey(): CallResult<Address> {
    let result = super.tryCall("makerUsdOracleKey", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  cDaiAddress(): Address {
    let result = super.call("cDaiAddress", []);

    return result[0].toAddress();
  }

  try_cDaiAddress(): CallResult<Address> {
    let result = super.tryCall("cDaiAddress", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getUnderlyingPrice(cToken: Address): BigInt {
    let result = super.call("getUnderlyingPrice", [
      EthereumValue.fromAddress(cToken)
    ]);

    return result[0].toBigInt();
  }

  try_getUnderlyingPrice(cToken: Address): CallResult<BigInt> {
    let result = super.tryCall("getUnderlyingPrice", [
      EthereumValue.fromAddress(cToken)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  v1PriceOracle(): Address {
    let result = super.call("v1PriceOracle", []);

    return result[0].toAddress();
  }

  try_v1PriceOracle(): CallResult<Address> {
    let result = super.tryCall("v1PriceOracle", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  cUsdcAddress(): Address {
    let result = super.call("cUsdcAddress", []);

    return result[0].toAddress();
  }

  try_cUsdcAddress(): CallResult<Address> {
    let result = super.tryCall("cUsdcAddress", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get comptroller_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get v1PriceOracle_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get cEthAddress_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get cUsdcAddress_(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get cDaiAddress_(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
