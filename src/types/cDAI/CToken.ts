// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class AccrueInterest extends EthereumEvent {
  get params(): AccrueInterest__Params {
    return new AccrueInterest__Params(this);
  }
}

export class AccrueInterest__Params {
  _event: AccrueInterest;

  constructor(event: AccrueInterest) {
    this._event = event;
  }

  get interestAccumulated(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get borrowIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalBorrows(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Mint extends EthereumEvent {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get minter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get mintAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get mintTokens(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Redeem extends EthereumEvent {
  get params(): Redeem__Params {
    return new Redeem__Params(this);
  }
}

export class Redeem__Params {
  _event: Redeem;

  constructor(event: Redeem) {
    this._event = event;
  }

  get redeemer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get redeemAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get redeemTokens(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Borrow extends EthereumEvent {
  get params(): Borrow__Params {
    return new Borrow__Params(this);
  }
}

export class Borrow__Params {
  _event: Borrow;

  constructor(event: Borrow) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get borrowAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get accountBorrows(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalBorrows(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RepayBorrow extends EthereumEvent {
  get params(): RepayBorrow__Params {
    return new RepayBorrow__Params(this);
  }
}

export class RepayBorrow__Params {
  _event: RepayBorrow;

  constructor(event: RepayBorrow) {
    this._event = event;
  }

  get payer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get borrower(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get repayAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get accountBorrows(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get totalBorrows(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class LiquidateBorrow extends EthereumEvent {
  get params(): LiquidateBorrow__Params {
    return new LiquidateBorrow__Params(this);
  }
}

export class LiquidateBorrow__Params {
  _event: LiquidateBorrow;

  constructor(event: LiquidateBorrow) {
    this._event = event;
  }

  get liquidator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get borrower(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get repayAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get cTokenCollateral(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get seizeTokens(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class NewPendingAdmin extends EthereumEvent {
  get params(): NewPendingAdmin__Params {
    return new NewPendingAdmin__Params(this);
  }
}

export class NewPendingAdmin__Params {
  _event: NewPendingAdmin;

  constructor(event: NewPendingAdmin) {
    this._event = event;
  }

  get oldPendingAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newPendingAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewAdmin extends EthereumEvent {
  get params(): NewAdmin__Params {
    return new NewAdmin__Params(this);
  }
}

export class NewAdmin__Params {
  _event: NewAdmin;

  constructor(event: NewAdmin) {
    this._event = event;
  }

  get oldAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewComptroller extends EthereumEvent {
  get params(): NewComptroller__Params {
    return new NewComptroller__Params(this);
  }
}

export class NewComptroller__Params {
  _event: NewComptroller;

  constructor(event: NewComptroller) {
    this._event = event;
  }

  get oldComptroller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newComptroller(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewMarketInterestRateModel extends EthereumEvent {
  get params(): NewMarketInterestRateModel__Params {
    return new NewMarketInterestRateModel__Params(this);
  }
}

export class NewMarketInterestRateModel__Params {
  _event: NewMarketInterestRateModel;

  constructor(event: NewMarketInterestRateModel) {
    this._event = event;
  }

  get oldInterestRateModel(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newInterestRateModel(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewReserveFactor extends EthereumEvent {
  get params(): NewReserveFactor__Params {
    return new NewReserveFactor__Params(this);
  }
}

export class NewReserveFactor__Params {
  _event: NewReserveFactor;

  constructor(event: NewReserveFactor) {
    this._event = event;
  }

  get oldReserveFactorMantissa(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newReserveFactorMantissa(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ReservesReduced extends EthereumEvent {
  get params(): ReservesReduced__Params {
    return new ReservesReduced__Params(this);
  }
}

export class ReservesReduced__Params {
  _event: ReservesReduced;

  constructor(event: ReservesReduced) {
    this._event = event;
  }

  get admin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get reduceAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newTotalReserves(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Failure extends EthereumEvent {
  get params(): Failure__Params {
    return new Failure__Params(this);
  }
}

export class Failure__Params {
  _event: Failure;

  constructor(event: Failure) {
    this._event = event;
  }

  get error(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get info(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get detail(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends EthereumEvent {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Approval extends EthereumEvent {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NewReserveFactor1 extends EthereumEvent {
  get params(): NewReserveFactor1__Params {
    return new NewReserveFactor1__Params(this);
  }
}

export class NewReserveFactor1__Params {
  _event: NewReserveFactor1;

  constructor(event: NewReserveFactor1) {
    this._event = event;
  }

  get oldReserveFactorMantissa(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newReserveFactorMantissa(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class CToken__getAccountSnapshotResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    map.set("value2", EthereumValue.fromUnsignedBigInt(this.value2));
    map.set("value3", EthereumValue.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class CToken extends SmartContract {
  static bind(address: Address): CToken {
    return new CToken("CToken", address);
  }

  name(): string {
    let result = super.call("name", []);

    return result[0].toString();
  }

  try_name(): CallResult<string> {
    let result = super.tryCall("name", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): CallResult<BigInt> {
    let result = super.tryCall("totalSupply", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  exchangeRateStored(): BigInt {
    let result = super.call("exchangeRateStored", []);

    return result[0].toBigInt();
  }

  try_exchangeRateStored(): CallResult<BigInt> {
    let result = super.tryCall("exchangeRateStored", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): BigInt {
    let result = super.call("decimals", []);

    return result[0].toBigInt();
  }

  try_decimals(): CallResult<BigInt> {
    let result = super.tryCall("decimals", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfUnderlying(owner: Address): BigInt {
    let result = super.call("balanceOfUnderlying", [
      EthereumValue.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOfUnderlying(owner: Address): CallResult<BigInt> {
    let result = super.tryCall("balanceOfUnderlying", [
      EthereumValue.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getCash(): BigInt {
    let result = super.call("getCash", []);

    return result[0].toBigInt();
  }

  try_getCash(): CallResult<BigInt> {
    let result = super.tryCall("getCash", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  totalBorrows(): BigInt {
    let result = super.call("totalBorrows", []);

    return result[0].toBigInt();
  }

  try_totalBorrows(): CallResult<BigInt> {
    let result = super.tryCall("totalBorrows", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  accrualBlockNumber(): BigInt {
    let result = super.call("accrualBlockNumber", []);

    return result[0].toBigInt();
  }

  try_accrualBlockNumber(): CallResult<BigInt> {
    let result = super.tryCall("accrualBlockNumber", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  underlying(): Address {
    let result = super.call("underlying", []);

    return result[0].toAddress();
  }

  try_underlying(): CallResult<Address> {
    let result = super.tryCall("underlying", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", [EthereumValue.fromAddress(owner)]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): CallResult<BigInt> {
    let result = super.tryCall("balanceOf", [EthereumValue.fromAddress(owner)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  totalReserves(): BigInt {
    let result = super.call("totalReserves", []);

    return result[0].toBigInt();
  }

  try_totalReserves(): CallResult<BigInt> {
    let result = super.tryCall("totalReserves", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", []);

    return result[0].toString();
  }

  try_symbol(): CallResult<string> {
    let result = super.tryCall("symbol", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  accrueInterest(): BigInt {
    let result = super.call("accrueInterest", []);

    return result[0].toBigInt();
  }

  try_accrueInterest(): CallResult<BigInt> {
    let result = super.tryCall("accrueInterest", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  borrowIndex(): BigInt {
    let result = super.call("borrowIndex", []);

    return result[0].toBigInt();
  }

  try_borrowIndex(): CallResult<BigInt> {
    let result = super.tryCall("borrowIndex", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  supplyRatePerBlock(): BigInt {
    let result = super.call("supplyRatePerBlock", []);

    return result[0].toBigInt();
  }

  try_supplyRatePerBlock(): CallResult<BigInt> {
    let result = super.tryCall("supplyRatePerBlock", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getAccountSnapshot(account: Address): CToken__getAccountSnapshotResult {
    let result = super.call("getAccountSnapshot", [
      EthereumValue.fromAddress(account)
    ]);

    return new CToken__getAccountSnapshotResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getAccountSnapshot(
    account: Address
  ): CallResult<CToken__getAccountSnapshotResult> {
    let result = super.tryCall("getAccountSnapshot", [
      EthereumValue.fromAddress(account)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new CToken__getAccountSnapshotResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  borrowRatePerBlock(): BigInt {
    let result = super.call("borrowRatePerBlock", []);

    return result[0].toBigInt();
  }

  try_borrowRatePerBlock(): CallResult<BigInt> {
    let result = super.tryCall("borrowRatePerBlock", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }
}

export class BalanceOfUnderlyingCall extends EthereumCall {
  get inputs(): BalanceOfUnderlyingCall__Inputs {
    return new BalanceOfUnderlyingCall__Inputs(this);
  }

  get outputs(): BalanceOfUnderlyingCall__Outputs {
    return new BalanceOfUnderlyingCall__Outputs(this);
  }
}

export class BalanceOfUnderlyingCall__Inputs {
  _call: BalanceOfUnderlyingCall;

  constructor(call: BalanceOfUnderlyingCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class BalanceOfUnderlyingCall__Outputs {
  _call: BalanceOfUnderlyingCall;

  constructor(call: BalanceOfUnderlyingCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class AccrueInterestCall extends EthereumCall {
  get inputs(): AccrueInterestCall__Inputs {
    return new AccrueInterestCall__Inputs(this);
  }

  get outputs(): AccrueInterestCall__Outputs {
    return new AccrueInterestCall__Outputs(this);
  }
}

export class AccrueInterestCall__Inputs {
  _call: AccrueInterestCall;

  constructor(call: AccrueInterestCall) {
    this._call = call;
  }
}

export class AccrueInterestCall__Outputs {
  _call: AccrueInterestCall;

  constructor(call: AccrueInterestCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
